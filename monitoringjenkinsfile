pipeline {
    agent any

    environment {
        PROMETHEUS_CONTAINER = 'prometheus'
        GRAFANA_CONTAINER = 'grafana'
    }

    stages {
        stage('Checkout') {
            steps {
                checkout scm
            }
        }

        stage('Install Docker Compose if Missing') {
            steps {
                script {
                    def composeCheck = sh(script: 'docker compose version || true', returnStatus: true)
                    if (composeCheck != 0) {
                        error("‚ùå Docker Compose v2 is not available.")
                    } else {
                        echo "‚úÖ Docker Compose v2 is available."
                    }
                }
            }
        }

        stage('Prepare Grafana Dashboard Directories') {
            steps {
                script {
                    echo "üìÅ Ensuring Grafana dashboard directories exist..."
                    sh '''
                        mkdir -p monitoring/grafana/dashboards
                        mkdir -p monitoring/grafana/provisioning/dashboards
                    '''
                    echo "‚úÖ Dashboard folders are set."
                }
            }
        }

        stage('Deploy Prometheus + Grafana') {
            steps {
                dir('monitoring') {
                    echo "üì¶ Deploying monitoring stack..."
                    sh 'docker compose down || true'
                    sh 'docker compose up -d --build'
                }
            }
        }

        stage('Validate Monitoring Services') {
            steps {
                script {
                    echo "‚è≥ Waiting for Prometheus & Grafana to become healthy..."

                    def maxRetries = 6
                    def sleepBetweenRetries = 5
                    def prometheusHealthy = false
                    def grafanaHealthy = false

                    for (int i = 1; i <= maxRetries; i++) {
                        echo "üîÅ Check attempt $i..."

                        def prometheusStatus = sh(
                            script: "docker exec ${PROMETHEUS_CONTAINER} wget -q --server-response --spider http://localhost:9090 2>&1 | awk '/HTTP\\// {print \$2}' | head -n 1",
                            returnStdout: true
                        ).trim()

                        def grafanaStatus = sh(
                            script: "docker exec ${GRAFANA_CONTAINER} curl -s -L -o /dev/null -w '%{http_code}' http://localhost:3000",
                            returnStdout: true
                        ).trim()

                        echo "üì° Prometheus HTTP: $prometheusStatus"
                        echo "üì° Grafana HTTP: $grafanaStatus"

                        def prometheusHealth = sh(
                            script: "docker inspect -f '{{.State.Health.Status}}' ${PROMETHEUS_CONTAINER} || echo unknown",
                            returnStdout: true
                        ).trim()

                        def grafanaHealth = sh(
                            script: "docker inspect -f '{{.State.Health.Status}}' ${GRAFANA_CONTAINER} || echo unknown",
                            returnStdout: true
                        ).trim()

                        echo "üì¶ Prometheus container health: $prometheusHealth"
                        echo "üì¶ Grafana container health: $grafanaHealth"

                        if ((prometheusStatus == '200' || prometheusStatus == '302') && prometheusHealth == 'healthy') {
                            prometheusHealthy = true
                        }

                        if ((grafanaStatus == '200' || grafanaStatus == '302') && grafanaHealth == 'healthy') {
                            grafanaHealthy = true
                        }

                        if (prometheusHealthy && grafanaHealthy) {
                            echo "‚úÖ Prometheus and Grafana are up and healthy."
                            break
                        }

                        sleep sleepBetweenRetries
                    }

                    if (!prometheusHealthy || !grafanaHealthy) {
                        error("‚ùå Validation failed: Prometheus (${prometheusHealthy ? 'OK' : 'FAIL'}) / Grafana (${grafanaHealthy ? 'OK' : 'FAIL'})")
                    }
                }
            }
        }
    }

    post {
        always {
            echo 'üîö Monitoring pipeline completed.'
        }
    }
}
