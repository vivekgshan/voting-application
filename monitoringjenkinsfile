pipeline {
    agent any

    environment {
        MONITORING_DIR = "monitoring"
    }

    stages {
        stage('Checkout') {
            steps {
                checkout scm
            }
        }

        stage('Install Docker Compose if Missing') {
            steps {
                script {
                    def composeCheck = sh(script: 'docker compose version || true', returnStatus: true)
                    if (composeCheck != 0) {
                        error("❌ Docker Compose v2 is not available.")
                    } else {
                        echo "✅ Docker Compose v2 is available."
                    }
                }
            }
        }

        stage('Copy Grafana Dashboards') {
            steps {
                script {
                    echo "📁 Ensuring Grafana dashboard directories exist..."
                    sh """
                        mkdir -p ${MONITORING_DIR}/grafana/dashboards
                        mkdir -p ${MONITORING_DIR}/grafana/provisioning/dashboards
                    """
                    echo "✅ Dashboard folders are set."
                }
            }
        }

        stage('Deploy Prometheus + Grafana') {
            steps {
                dir("${MONITORING_DIR}") {
                    echo "📦 Deploying monitoring stack..."
                    sh 'docker compose down || true'
                    sh 'docker compose up -d --build'
                }
            }
        }

        stage('Validate Monitoring Services') {
            steps {
                script {
                    echo "⏳ Waiting for services to become healthy..."

                    def waitForHealthy = { container, retries = 10, delay = 5 ->
                        def status = ""
                        for (int i = 1; i <= retries; i++) {
                            status = sh(
                                script: "docker inspect --format='{{ .State.Health.Status }}' ${container} || echo unknown",
                                returnStdout: true
                            ).trim()

                            echo "🔍 Attempt ${i}: ${container} health = ${status}"

                            if (status == "healthy") {
                                echo "✅ ${container} is healthy"
                                return
                            }

                            sleep time: delay, unit: 'SECONDS'
                        }
                        error("❌ ${container} did not become healthy. Final status: ${status}")
                    }

                    waitForHealthy('prometheus')
                    waitForHealthy('grafana')
                }
            }
        }
    }

    post {
        always {
            echo '🔚 Monitoring pipeline completed.'
        }
    }
}
