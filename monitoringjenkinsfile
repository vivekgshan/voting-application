pipeline {
    agent any

    stages {
        stage('Checkout') {
            steps {
                checkout scm
            }
        }

        stage('Install Docker Compose if Missing') {
            steps {
                script {
                    def composeCheck = sh(script: 'docker compose version || true', returnStatus: true)
                    if (composeCheck != 0) {
                        error("❌ Docker Compose v2 is not available.")
                    } else {
                        echo "✅ Docker Compose v2 is available."
                    }
                }
            }
        }

        stage('Validate Dashboard Files') {
            steps {
                script {
                    echo "📁 Validating presence of Grafana dashboard JSONs..."
                    def count = sh(script: "ls monitoring/grafana/dashboards/*.json | wc -l", returnStdout: true).trim()
                    if (count == "0") {
                        error("❌ No dashboard JSON files found in monitoring/grafana/dashboards/")
                    }
                    echo "✅ Found $count dashboard(s)."
                }
            }
        }

        stage('Deploy Prometheus + Grafana') {
            steps {
                dir('monitoring') {
                    echo "📦 Deploying monitoring stack..."
                    sh 'docker compose down || true'
                    sh 'docker compose up -d --build'
                }
            }
        }

        stage('Validate Monitoring Services') {
            steps {
                script {
                    echo "⏳ Waiting for services to start..."
                    sleep 10

                    def prometheusHealth = sh(
                        script: "docker inspect -f '{{.State.Health.Status}}' prometheus || echo unknown",
                        returnStdout: true
                    ).trim()

                    def grafanaHealth = sh(
                        script: "docker inspect -f '{{.State.Health.Status}}' grafana || echo unknown",
                        returnStdout: true
                    ).trim()

                    echo "📡 Prometheus health: $prometheusHealth"
                    echo "📡 Grafana health: $grafanaHealth"

                    if (!(prometheusHealth in ['healthy', 'running']) || !(grafanaHealth in ['healthy', 'running'])) {
                        error("❌ Prometheus or Grafana not healthy (Prometheus: $prometheusHealth, Grafana: $grafanaHealth)")
                    }

                    echo "✅ Prometheus & Grafana are up and healthy"
                }
            }
        }
    }

    post {
        always {
            echo '🔚 Monitoring pipeline completed.'
        }
    }
}
