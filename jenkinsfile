pipeline {
    agent any

    environment {
        COMPOSE_PROJECT_NAME = "voting"
        UI_SERVICE = "voting-ui"
        MYSQL_SERVICE = "mysql-db"
    }

    stages {
        stage('Checkout') {
            steps {
                checkout scm
            }
        }

        stage('Install Docker Compose v2 (if needed)') {
            steps {
                script {
                    def composeInstalled = sh(script: "docker compose version || true", returnStatus: true)
                    if (composeInstalled != 0) {
                        echo "üîß Docker Compose v2 not found. Installing..."
                        sh '''
                            set -e
                            DOCKER_COMPOSE_PLUGIN_DIR=/usr/libexec/docker/cli-plugins
                            sudo mkdir -p $DOCKER_COMPOSE_PLUGIN_DIR
                            sudo curl -SL https://github.com/docker/compose/releases/download/v2.27.0/docker-compose-linux-x86_64 -o $DOCKER_COMPOSE_PLUGIN_DIR/docker-compose
                            sudo chmod +x $DOCKER_COMPOSE_PLUGIN_DIR/docker-compose

                            echo "‚úÖ Docker Compose installed:"
                            docker compose version
                        '''
                    } else {
                        echo "‚úÖ Docker Compose v2 is already installed."
                    }
                }
            }
        }

        stage('Build & Run Voting System') {
            steps {
                script {
                    echo "üì¶ Building and starting Voting UI and MySQL using Docker Compose..."
                    sh '''
                        docker compose down || true
                        docker compose up -d --build
                    '''
                }
            }
        }

        stage('Health Check') {
            steps {
                script {
                    echo "üîç Waiting for the voting UI to respond..."
                    sleep 15
                    def status = sh(script: "curl -s -o /dev/null -w '%{http_code}' http://localhost", returnStdout: true).trim()
                    if (status != '200') {
                        error("‚ùå Voting UI is not responding (HTTP ${status})")
                    } else {
                        echo "‚úÖ Voting UI is running successfully (HTTP ${status})"
                    }
                }
            }
        }
    }

    post {
        success {
            echo 'üéâ Deployment pipeline succeeded!'
        }

        failure {
            echo '‚ùå Deployment pipeline failed. Showing logs...'
            script {
                sh 'docker compose logs voting-ui || true'
                sh 'docker compose logs mysql-db || true'
            }
        }

        always {
            echo 'üßπ Cleaning up Docker containers...'
            script {
                sh 'docker compose down || true'
            }
        }
    }
}
