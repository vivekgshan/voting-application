pipeline {
    agent any

    environment {
        COMPOSE_VERSION = "v2.24.5"
        COMPOSE_PLUGIN_PATH = "/usr/local/lib/docker/cli-plugins"
    }

    stages {
        stage('Checkout') {
            steps {
                checkout scm
            }
        }

        stage('Ensure Docker Compose v2 Installed') {
            steps {
                script {
                    def composeStatus = sh(script: "docker compose version > /dev/null 2>&1 || true", returnStatus: true)
                    if (composeStatus != 0) {
                        echo "üîß Docker Compose v2 not found. Installing..."

                        sh """
                        sudo mkdir -p ${COMPOSE_PLUGIN_PATH}
                        sudo curl -SL https://github.com/docker/compose/releases/download/${COMPOSE_VERSION}/docker-compose-linux-x86_64 \\
                             -o ${COMPOSE_PLUGIN_PATH}/docker-compose
                        sudo chmod +x ${COMPOSE_PLUGIN_PATH}/docker-compose
                        echo "‚úÖ Docker Compose v2 installed successfully."
                        docker compose version
                        """
                    } else {
                        echo "‚úÖ Docker Compose v2 is already installed."
                        sh "docker compose version"
                    }
                }
            }
        }

        stage('Build & Run Voting System') {
            steps {
                script {
                    echo "üõ†Ô∏è Bringing down any existing containers..."
                    sh 'docker compose down || true'

                    echo "üöÄ Building and launching containers..."
                    sh 'docker compose up -d --build'
                }
            }
        }

        stage('Health Check') {
            steps {
                script {
                    echo "‚è≥ Waiting for application to start..."
                    sleep 10

                    def status = sh(script: "curl -s -o /dev/null -w '%{http_code}' http://localhost", returnStdout: true).trim()
                    if (status != '200') {
                        error("‚ùå Voting UI not responding (HTTP $status)")
                    } else {
                        echo "‚úÖ Voting system running successfully (HTTP $status)"
                    }
                }
            }
        }
    }

    post {
        always {
            echo 'üì¶ Jenkins pipeline execution completed.'
        }
        success {
            echo 'üéâ Pipeline finished successfully!'
        }
        failure {
            echo '‚ö†Ô∏è One or more stages failed. Check logs above.'
        }
    }
}
