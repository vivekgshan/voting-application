pipeline {
    agent any

    environment {
        DOCKER_COMPOSE_VERSION = "v2.24.5" // You can change this to the latest release
    }

    stages {
        stage('Checkout') {
            steps {
                checkout scm
            }
        }

        stage('Ensure Docker Compose v2 Installed') {
            steps {
                script {
                    def composeStatus = sh(script: "docker compose version > /dev/null 2>&1 || true", returnStatus: true)
                    if (composeStatus != 0) {
                        echo "üîß Docker Compose v2 not found. Installing..."

                        sh '''
                        mkdir -p ~/.docker/cli-plugins
                        curl -SL https://github.com/docker/compose/releases/download/${DOCKER_COMPOSE_VERSION}/docker-compose-linux-x86_64 -o ~/.docker/cli-plugins/docker-compose
                        chmod +x ~/.docker/cli-plugins/docker-compose
                        export PATH=$PATH:~/.docker/cli-plugins
                        docker compose version
                        '''
                    } else {
                        echo "‚úÖ Docker Compose v2 is already installed."
                        sh "docker compose version"
                    }
                }
            }
        }

        stage('Build & Run') {
            steps {
                script {
                    sh 'docker compose down || true'
                    sh 'docker compose up -d --build'
                }
            }
        }

        stage('Health Check') {
            steps {
                script {
                    sleep 10
                    def status = sh(script: "curl -s -o /dev/null -w '%{http_code}' http://localhost", returnStdout: true).trim()
                    if (status != '200') {
                        error("‚ùå Voting UI not responding (HTTP $status)")
                    } else {
                        echo "‚úÖ Voting system running successfully (HTTP $status)"
                    }
                }
            }
        }
    }

    post {
        always {
            echo 'üõ†Ô∏è Jenkins pipeline execution completed.'
        }
        failure {
            echo '‚ö†Ô∏è One or more stages failed. Please check the logs.'
        }
    }
}
