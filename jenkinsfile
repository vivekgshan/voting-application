pipeline {
    agent any

    environment {
        MYSQL_DB = "votingdb"
        MYSQL_USER = "votinguser"
        MYSQL_PASS = "votingpass"
        MYSQL_ROOT_PASSWORD = "rootpass"
        PHP_UI_CONTAINER = "voting_php_ui"
    }

    stages {
        stage('Checkout') {
            steps {
                checkout scm
            }
        }

        stage('Ensure MySQL Installed & Running') {
            steps {
                script {
                    def mysqlCheck = sh(script: "which mysql || true", returnStdout: true).trim()
                    if (!mysqlCheck) {
                        echo "üîß Installing MySQL..."
                        sh """
                        sudo apt-get update
                        sudo DEBIAN_FRONTEND=noninteractive apt-get install -y mysql-server
                        sudo systemctl enable mysql
                        """
                    } else {
                        echo "‚úÖ MySQL is already installed."
                    }

                    echo "üîÅ Starting MySQL service..."
                    sh """
                    sudo systemctl start mysql
                    sudo systemctl status mysql || true
                    """

                    echo "‚öôÔ∏è Configuring MySQL user and database..."
                    sh """
                    sudo mysql -uroot -e "CREATE DATABASE IF NOT EXISTS ${MYSQL_DB};"
                    sudo mysql -uroot -e "CREATE USER IF NOT EXISTS '${MYSQL_USER}'@'localhost' IDENTIFIED BY '${MYSQL_PASS}';"
                    sudo mysql -uroot -e "GRANT ALL PRIVILEGES ON ${MYSQL_DB}.* TO '${MYSQL_USER}'@'localhost'; FLUSH PRIVILEGES;"
                    """

                    echo "üü¢ MySQL is ready."
                }
            }
        }

        stage('Build & Run PHP Voting UI in Docker') {
            steps {
                script {
                    echo "üõ†Ô∏è Building Docker image..."
                    sh 'docker build -t voting-ui ./frontend'

                    echo "üöÄ Starting PHP UI container..."
                    sh """
                    docker rm -f ${PHP_UI_CONTAINER} || true
                    docker run -d \\
                        --name ${PHP_UI_CONTAINER} \\
                        -p 80:80 \\
                        -e DB_HOST=host.docker.internal \\
                        -e DB_NAME=${MYSQL_DB} \\
                        -e DB_USER=${MYSQL_USER} \\
                        -e DB_PASS=${MYSQL_PASS} \\
                        voting-ui
                    """
                }
            }
        }

        stage('Health Check') {
            steps {
                script {
                    echo "‚è≥ Waiting for app to come online..."
                    sleep 10
                    def status = sh(script: "curl -s -o /dev/null -w '%{http_code}' http://localhost", returnStdout: true).trim()
                    if (status != '200') {
                        error("‚ùå Voting UI not responding (HTTP $status)")
                    } else {
                        echo "‚úÖ Voting UI is live (HTTP $status)"
                    }
                }
            }
        }
    }

    post {
        always {
            echo 'üß™ Pipeline run finished.'
        }
        failure {
            echo '‚ùå One or more steps failed.'
            script {
                sh "docker logs ${PHP_UI_CONTAINER} || true"
                sh "sudo systemctl status mysql || true"
            }
        }
        success {
            echo 'üéâ All services up and running successfully!'
        }
    }
}
