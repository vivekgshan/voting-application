pipeline {
    agent any

    environment {
        MYSQL_DB = "votingdb"
        MYSQL_USER = "votinguser"
        MYSQL_PASS = "votingpass"
        MYSQL_ROOT_PASSWORD = "rootpass" // optional if root has no password
        PHP_UI_CONTAINER = "voting_php_ui"
    }

    stages {
        stage('Checkout') {
            steps {
                checkout scm
            }
        }

        // Optional: Uncomment if SonarQube is configured
        // stage('SonarQube Analysis') {
        //     steps {
        //         withSonarQubeEnv('SonarQubeServer') {
        //             sh 'sonar-scanner'
        //         }
        //     }
        // }

        stage('Ensure MySQL Installed & Running') {
            steps {
                script {
                    def mysqlCheck = sh(script: "which mysql || true", returnStdout: true).trim()
                    if (!mysqlCheck) {
                        echo "üîß Installing MySQL 8.0 on Amazon Linux 2023..."
                        sh '''
                        sudo rpm -Uvh https://dev.mysql.com/get/mysql80-community-release-el9-1.noarch.rpm
                        sudo dnf install -y mysql-community-server
                        sudo systemctl enable mysqld
                        '''
                    } else {
                        echo "‚úÖ MySQL is already installed."
                    }

                    echo "üîÅ Starting MySQL service..."
                    sh '''
                    sudo systemctl start mysqld
                    sudo systemctl status mysqld || true
                    '''

                    echo "‚öôÔ∏è Configuring MySQL user and database..."
                    sh """
                    sudo mysql -uroot -e "CREATE DATABASE IF NOT EXISTS ${MYSQL_DB};"
                    sudo mysql -uroot -e "CREATE USER IF NOT EXISTS '${MYSQL_USER}'@'localhost' IDENTIFIED BY '${MYSQL_PASS}';"
                    sudo mysql -uroot -e "GRANT ALL PRIVILEGES ON ${MYSQL_DB}.* TO '${MYSQL_USER}'@'localhost'; FLUSH PRIVILEGES;"
                    """
                }
            }
        }

        stage('Wait for MySQL to be Ready') {
            steps {
                script {
                    echo "‚è≥ Waiting for MySQL to become available..."
                    timeout(time: 60, unit: 'SECONDS') {
                        waitUntil {
                            def result = sh(
                                script: "mysqladmin ping -h 127.0.0.1 --silent",
                                returnStatus: true
                            )
                            return (result == 0)
                        }
                    }
                    echo "‚úÖ MySQL is ready."
                }
            }
        }

        stage('Build & Run PHP Voting UI in Docker') {
            steps {
                script {
                    echo "üõ†Ô∏è Building Docker image for Voting UI..."
                    sh 'docker build -t voting-ui ./frontend'

                    echo "üöÄ Running PHP Voting UI container..."
                    sh """
                    docker rm -f ${PHP_UI_CONTAINER} || true
                    docker run -d \\
                        --name ${PHP_UI_CONTAINER} \\
                        -p 80:80 \\
                        -e DB_HOST=host.docker.internal \\
                        -e DB_NAME=${MYSQL_DB} \\
                        -e DB_USER=${MYSQL_USER} \\
                        -e DB_PASS=${MYSQL_PASS} \\
                        voting-ui
                    """
                }
            }
        }

        stage('Health Check') {
            steps {
                script {
                    echo "üîç Checking if UI is available..."
                    sleep 10
                    def status = sh(script: "curl -s -o /dev/null -w '%{http_code}' http://localhost", returnStdout: true).trim()
                    if (status != '200') {
                        error("‚ùå Voting UI not responding (HTTP $status)")
                    } else {
                        echo "‚úÖ Voting UI is live (HTTP $status)"
                    }
                }
            }
        }
    }

    post {
        success {
            echo 'üéâ All stages passed and services are running!'
        }
        failure {
            echo '‚ùå One or more stages failed.'
            script {
                sh "docker logs ${PHP_UI_CONTAINER} || true"
                sh "sudo systemctl status mysqld || true"
            }
        }
        always {
            echo 'üßº Cleaning up Docker containers (optional)...'
            script {
                sh "docker stop ${PHP_UI_CONTAINER} || true"
                sh "docker rm ${PHP_UI_CONTAINER} || true"
            }
        }
    }
}
