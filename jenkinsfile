pipeline {
    agent any

    environment {
        MYSQL_DB = "votingdb"
        MYSQL_USER = "votinguser"
        MYSQL_PASS = "votingpass"
        PHP_UI_CONTAINER = "voting_php_ui"
    }

    stages {
        stage('Checkout') {
            steps {
                checkout scm
            }
        }

        // ‚ùå MySQL installation stage disabled
        /*
        stage('Ensure MySQL Installed & Running') {
            steps {
                script {
                    try {
                        def mysqlCheck = sh(script: "which mysql || true", returnStdout: true).trim()
                        if (!mysqlCheck) {
                            echo "üîß Installing MySQL skipped."
                        } else {
                            echo "‚úÖ MySQL already installed."
                        }

                        echo "üöÄ Starting MySQL..."
                        sh '''
                            sudo systemctl start mysqld
                            sudo systemctl status mysqld || true
                        '''

                        echo "‚öôÔ∏è Creating DB and user..."
                        sh """
                            sudo mysql -uroot -e "CREATE DATABASE IF NOT EXISTS ${MYSQL_DB};"
                            sudo mysql -uroot -e "CREATE USER IF NOT EXISTS '${MYSQL_USER}'@'localhost' IDENTIFIED BY '${MYSQL_PASS}';"
                            sudo mysql -uroot -e "GRANT ALL PRIVILEGES ON ${MYSQL_DB}.* TO '${MYSQL_USER}'@'localhost'; FLUSH PRIVILEGES;"
                        """
                    } catch (Exception e) {
                        echo "‚ùå MySQL installation or configuration failed: ${e.message}"
                        throw e
                    }
                }
            }
        }
        */

        stage('Wait for MySQL to be Ready') {
            steps {
                script {
                    echo "‚è≥ Waiting for MySQL to respond..."
                    timeout(time: 60, unit: 'SECONDS') {
                        waitUntil {
                            def result = sh(
                                script: "mysqladmin ping -h 127.0.0.1 --silent",
                                returnStatus: true
                            )
                            return (result == 0)
                        }
                    }
                    echo "‚úÖ MySQL is up and ready."
                }
            }
        }

        stage('Build & Run PHP Voting UI in Docker') {
            steps {
                script {
                    echo "üõ†Ô∏è Building Docker image..."
                    sh 'docker build -t voting-ui ./frontend'

                    echo "üöÄ Running container..."
                    sh """
                        docker rm -f ${PHP_UI_CONTAINER} || true
                        docker run -d \\
                            --name ${PHP_UI_CONTAINER} \\
                            -p 80:80 \\
                            -e DB_HOST=host.docker.internal \\
                            -e DB_NAME=${MYSQL_DB} \\
                            -e DB_USER=${MYSQL_USER} \\
                            -e DB_PASS=${MYSQL_PASS} \\
                            voting-ui
                    """
                }
            }
        }

        stage('Health Check') {
            steps {
                script {
                    echo "üîç Checking UI health..."
                    sleep 10
                    def status = sh(script: "curl -s -o /dev/null -w '%{http_code}' http://localhost", returnStdout: true).trim()
                    if (status != '200') {
                        error("‚ùå Voting UI is not responding (HTTP $status)")
                    } else {
                        echo "‚úÖ Voting UI is running (HTTP $status)"
                    }
                }
            }
        }
    }

    post {
        success {
            echo 'üéâ Pipeline completed successfully.'
        }
        failure {
            echo '‚ùå Pipeline failed. Showing logs...'
            script {
                sh "docker logs ${PHP_UI_CONTAINER} || true"
                sh "sudo systemctl status mysqld || true"
            }
        }
        always {
            echo 'üßº Cleanup: stopping Docker container...'
            script {
                sh "docker stop ${PHP_UI_CONTAINER} || true"
                sh "docker rm ${PHP_UI_CONTAINER} || true"
            }
        }
    }
}
