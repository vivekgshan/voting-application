pipeline {
    agent any

    environment {
        COMPOSE_PROJECT_NAME = "voting"
        UI_SERVICE = "voting-ui"
        MYSQL_SERVICE = "mysql-db"
    }

    stages {
        stage('Run Prerequisites') {
            steps {
                echo "üöÄ Ensuring Docker Compose is available..."
                build job: 'Packages-Installation', wait: true
            }
        }

        stage('Checkout Source') {
            steps {
                checkout scm
            }
        }

        stage('Restart Containers if Running') {
            steps {
                script {
                    echo "‚ôªÔ∏è Restarting containers if already running..."

                    // Restart MySQL if running
                    def mysqlRunning = sh(script: "docker ps --filter 'name=${MYSQL_SERVICE}' --format '{{.Names}}'", returnStdout: true).trim()
                    if (mysqlRunning == "${MYSQL_SERVICE}") {
                        echo "üîÅ Restarting ${MYSQL_SERVICE}..."
                        sh "docker restart ${MYSQL_SERVICE}"
                    } else {
                        echo "‚ÑπÔ∏è ${MYSQL_SERVICE} is not running."
                    }

                    // Restart Voting UI if running
                    def uiRunning = sh(script: "docker ps --filter 'name=${UI_SERVICE}' --format '{{.Names}}'", returnStdout: true).trim()
                    if (uiRunning == "${UI_SERVICE}") {
                        echo "üîÅ Restarting ${UI_SERVICE}..."
                        sh "docker restart ${UI_SERVICE}"
                    } else {
                        echo "‚ÑπÔ∏è ${UI_SERVICE} is not running."
                    }
                }
            }
        }

        stage('Build & Run Voting App') {
            steps {
                echo "üì¶ Building and starting containers using docker-compose..."
                sh '''
                    docker compose down || true
                    docker compose up -d --build
                '''
            }
        }

        stage('Health Check') {
            steps {
                script {
                    echo "üîç Verifying voting UI is up..."
                    sleep 10
                    def status = sh(script: "curl -s -o /dev/null -w '%{http_code}' http://localhost", returnStdout: true).trim()
                    if (status != '200') {
                        error("‚ùå Voting UI not responding (HTTP ${status})")
                    } else {
                        echo "‚úÖ Voting UI is healthy (HTTP ${status})"
                    }
                }
            }
        }
    }

    post {
        always {
            echo 'üßπ Cleaning up resources...'
            sh 'docker compose down || true'
        }

        failure {
            echo '‚ùå Build failed. Showing container logs...'
            sh 'docker compose logs voting-ui || true'
            sh 'docker compose logs mysql-db || true'
        }

        success {
            echo 'üéâ Deployment succeeded!'
        }
    }
}
